{{ if or (eq .Values.expose.type "loadbalancer") (eq .Values.expose.type "nodeport") }}
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
  name: set-api-url-env-to-cno-api
spec:
  template:
    spec:
      containers:
      - name: pi
        image: bitnami/kubectl
        {{ if eq .Values.expose.type "loadbalancer" }}
        command: ['bash', '-c', 'timeout=300; external_ip=""; while [ -z $external_ip ] && [ $timeout -gt 0 ]; do echo "Waiting for end point..."; timeout=$((timeout - 5)); external_ip=$(kubectl -n {{ $.Release.Namespace }} get svc cno-api -o=jsonpath="{.status.loadBalancer.ingress[0].ip}"); [ -z "$external_ip" ] && sleep 10; done; if [ ! "${timeout}" -gt 0 ]; then echo "timeout to get loadbalancer IP adress"; exit 1; fi; echo "End point ready-" && echo $external_ip; kubectl -n {{ $.Release.Namespace }} set env deployment/cno-api SERVER_URL=http://$external_ip']
        {{ else if eq .Values.expose.type "nodeport"  }}
        command: ['bash', '-c', 'timeout=300; nodeport=""; while [ -z $nodeport ] && [ $timeout -gt 0 ]; do echo "Waiting for end point..."; timeout=$((timeout - 5)); nodeport=$(kubectl -n {{ $.Release.Namespace }} get svc cno-api -o=jsonpath="{.spec.ports[0].nodePort}"); [ -z "$nodeport" ] && sleep 10; done; if [ ! "${timeout}" -gt 0 ]; then echo "timeout to get nodePort"; exit 1; fi; echo "End point ready-" && echo $nodeport; kubectl -n {{ $.Release.Namespace }} set env deployment/cno-api SERVER_URL=http://{{ $.Values.expose.nodePortIPAddress }}:$nodeport']
        {{ end }}
      restartPolicy: Never
      serviceAccountName: cno-api
  backoffLimit: 1

---

apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
  name: set-ui-url-env-to-cno-api
spec:
  template:
    spec:
      containers:
      - name: pi
        image: bitnami/kubectl
        {{ if eq .Values.expose.type "loadbalancer" }}
        command: ['bash', '-c', 'timeout=300; external_ip=""; while [ -z $external_ip ] && [ $timeout -gt 0 ]; do echo "Waiting for end point..."; timeout=$((timeout - 5)); external_ip=$(kubectl -n {{ $.Release.Namespace }} get svc cno-ui -o=jsonpath="{.status.loadBalancer.ingress[0].ip}"); [ -z "$external_ip" ] && sleep 10; done; if [ ! "${timeout}" -gt 0 ]; then echo "timeout to get loadbalancer IP adress"; exit 1; fi; echo "End point ready-" && echo $external_ip; kubectl -n {{ $.Release.Namespace }} set env deployment/cno-api SERVER_URL=http://$external_ip']
        {{ else if eq .Values.expose.type "nodeport"  }}
        command: ['bash', '-c', 'timeout=300; nodeport=""; while [ -z $nodeport ] && [ $timeout -gt 0 ]; do echo "Waiting for end point..."; timeout=$((timeout - 5)); nodeport=$(kubectl -n {{ $.Release.Namespace }} get svc cno-ui -o=jsonpath="{.spec.ports[0].nodePort}"); [ -z "$nodeport" ] && sleep 10; done; if [ ! "${timeout}" -gt 0 ]; then echo "timeout to get nodePort"; exit 1; fi; echo "End point ready-" && echo $nodeport; kubectl -n {{ $.Release.Namespace }} set env deployment/cno-api UI_URL=http://{{ $.Values.expose.nodePortIPAddress }}:$nodeport']
        {{ end }}
      restartPolicy: Never
      serviceAccountName: cno-api
  backoffLimit: 2

---

apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
  name: set-api-url-env-to-cno-ui
spec:
  template:
    spec:
      containers:
      - name: pi
        image: bitnami/kubectl
        {{ if eq .Values.expose.type "loadbalancer" }}
        command: ['bash', '-c', 'timeout=300; external_ip=""; while [ -z $external_ip ] && [ $timeout -gt 0 ]; do echo "Waiting for end point..."; timeout=$((timeout - 5)); external_ip=$(kubectl -n {{ $.Release.Namespace }} get svc cno-api -o=jsonpath="{.status.loadBalancer.ingress[0].ip}"); [ -z "$external_ip" ] && sleep 10; done; if [ ! "${timeout}" -gt 0 ]; then echo "timeout to get loadbalancer IP adress"; exit 1; fi; echo "End point ready-" && echo $external_ip; kubectl -n {{ $.Release.Namespace }} set env deployment/cno-ui SERVER_URL=http://$external_ip']
        {{ else if eq .Values.expose.type "nodeport"  }}
        command: ['bash', '-c', 'timeout=300; nodeport=""; while [ -z $nodeport ] && [ $timeout -gt 0 ]; do echo "Waiting for end point..."; timeout=$((timeout - 5)); nodeport=$(kubectl -n {{ $.Release.Namespace }} get svc cno-api -o=jsonpath="{.spec.ports[0].nodePort}"); [ -z "$nodeport" ] && sleep 10; done; if [ ! "${timeout}" -gt 0 ]; then echo "timeout to get nodePort"; exit 1; fi; echo "End point ready-" && echo $nodeport; kubectl -n {{ $.Release.Namespace }} set env deployment/cno-ui API_URL=http://{{ $.Values.expose.nodePortIPAddress }}:$nodeport']
        {{ end }}
      restartPolicy: Never
      serviceAccountName: cno-api
  backoffLimit: 2

---

apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
  name: set-brocker-env-to-cno-api
spec:
  template:
    spec:
      containers:
      - name: pi
        image: bitnami/kubectl
        {{ if eq .Values.expose.type "loadbalancer" }}
        command: ['bash', '-c', 'timeout=300; external_ip=""; while [ -z $external_ip ] && [ $timeout -gt 0 ]; do echo "Waiting for end point..."; timeout=$((timeout - 5)); external_ip=$(kubectl -n {{ $.Release.Namespace }} get svc cno-kafka-cluster-kafka-external-bootstrap -o=jsonpath="{.status.loadBalancer.ingress[0].ip}"); [ -z "$external_ip" ] && sleep 10; done; if [ ! "${timeout}" -gt 0 ]; then echo "timeout to get loadbalancer IP adress"; exit 1; fi; echo "End point ready-" && echo $external_ip; kubectl -n {{ $.Release.Namespace }} set env deployment/cno-api SERVER_URL=http://$external_ip']
        {{ else if eq .Values.expose.type "nodeport"  }}
        command: ['bash', '-c', 'timeout=300; nodeport=""; while [ -z $nodeport ] && [ $timeout -gt 0 ]; do echo "Waiting for end point..."; timeout=$((timeout - 5)); nodeport=$(kubectl -n {{ $.Release.Namespace }} get svc cno-kafka-cluster-kafka-external-bootstrap -o=jsonpath="{.spec.ports[0].nodePort}"); [ -z "$nodeport" ] && sleep 10; done; if [ ! "${timeout}" -gt 0 ]; then echo "timeout to get nodePort"; exit 1; fi; echo "End point ready-" && echo $nodeport; kubectl -n {{ $.Release.Namespace }} set env deployment/cno-api DEFAULT_EXTERNAL_BROKERS_URL=http://{{ $.Values.expose.nodePortIPAddress }}:$nodeport']
        {{ end }}
      restartPolicy: Never
      serviceAccountName: cno-api
  backoffLimit: 2
{{ end }}