apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.keycloakConfig.service.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: keycloak
spec:
  ports:
    - name: {{ .Values.keycloakConfig.service.protocol }}
      port: {{ .Values.keycloakConfig.service.port }}
      targetPort: {{ .Values.keycloakConfig.service.port }}
  selector:
    app: cno-keycloak
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cno-keycloak
  namespace: {{ .Release.Namespace }}
  labels:
    app: cno-keycloak
  {{- range $key, $value := .Values.keycloakConfig.labels }}
    {{ $key  }}: {{ $value  }}
  {{- end }}
spec:
  serviceName: keycloak
  replicas: 1
  selector:
    matchLabels:
      app: cno-keycloak
  template:
    metadata:
      labels:
        app: cno-keycloak
      {{- range $key, $value := .Values.keycloakConfig.labels }}
        {{ $key  }}: {{ $value  }}
      {{- end }}
    spec:
      initContainers:
      - name: init-db
        env:
          - name: DB_ADDR
            value: {{ .Values.databaseConfig.host }}
          - name: DB_DATABASE
            value: {{ .Values.databaseConfig.database }}
          - name: DB_PORT
            value: {{ .Values.databaseConfig.port | quote }}
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.databaseConfig.secret.name }}
                key: DB_USERNAME
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.databaseConfig.secret.name }}
                key: DB_PASSWORD
        image: {{ .Values.databaseConfig.image.name }}:{{ .Values.databaseConfig.image.version }}
        command: ["/bin/sh","-c"]
        args:
          - |
            while ! mysql -h$DB_ADDR -P$DB_PORT -u$DB_USER -p$DB_PASSWORD  -e "create database if not exists $DB_DATABASE;" ; do
              date
              echo `date` Failed: mysql -h$DB_ADDR -P$DB_PORT -u$DB_USER -p$DB_PASSWORD  -e "create database if not exists $DB_DATABASE;"
              sleep 10
            done
            echo Successed: `date`
      containers:
        - name: keycloak
          image: {{ .Values.keycloakConfig.image.name }}:{{ .Values.keycloakConfig.image.version }}
          {{- if hasKey .Values.keycloakConfig "resources" }}
          resources:
            {{- toYaml .Values.keycloakConfig.resources | nindent 12 }}
          {{- end }}
          env:
            - name: KEYCLOAK_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "cno-chart.keycloakAdminSecret" . }}
                  key: ADMIN_USERNAME
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "cno-chart.keycloakAdminSecret" . }}
                  key: ADMIN_PASSWORD
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: DB_VENDOR
              value: {{ .Values.databaseConfig.type }}
            - name: DB_ADDR
              value: {{ .Values.databaseConfig.host }}
            - name: DB_DATABASE
              value: {{ .Values.databaseConfig.database }}
            - name: DB_PORT
              value: {{ .Values.databaseConfig.port | quote }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.databaseConfig.secret.name }}
                  key: DB_USERNAME
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.databaseConfig.secret.name }}
                  key: DB_PASSWORD
            - name : KEYCLOAK_HTTP_PORT
              value : "80"
            - name: KEYCLOAK_HTTPS_PORT
              value: "443"
            - name: KEYCLOAK_IMPORT
              value: /cno/cno-realm.json
          volumeMounts:
            - name: cno-realm
              mountPath: /cno
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          readinessProbe:
            httpGet:
              path: /auth/realms/master
              port: 8080
      volumes:
        - name: cno-realm
          configMap:
            name: cno-realm
